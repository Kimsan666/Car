const prisma = require("../config/prisma");

// ‡∫™‡ªâ‡∫≤‡∫á‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡ªÉ‡ªù‡ªà
exports.createOrder = async (req, res) => {
  try {
    const {
      customerId,
      totalAmount,
      items // [{ carId, quantity, price }]
    } = req.body;

    const userId = req.user.id; // ‡∫à‡∫≤‡∫Å middleware auth

    console.log("üì¶ Creating order with data:", { customerId, totalAmount, items, userId });

    // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫à‡∫≥‡ªÄ‡∫õ‡∫±‡∫ô
    if (!customerId || !totalAmount || !items || items.length === 0) {
      return res.status(400).json({
        success: false,
        message: "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫à‡∫≥‡ªÄ‡∫õ‡∫±‡∫ô‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫ª‡∫ö‡∫ñ‡ªâ‡∫ß‡∫ô"
      });
    }

    // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫°‡∫µ‡∫¢‡∫π‡ªà‡∫à‡∫¥‡∫á‡∫´‡∫º‡∫∑‡∫ö‡ªç‡ªà
    const customer = await prisma.customer.findUnique({
      where: { id: parseInt(customerId) }
    });

    if (!customer) {
      return res.status(404).json({
        success: false,
        message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤"
      });
    }

    console.log("‚úÖ Customer found:", customer.fname, customer.lname);

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ saleCar ‡πÅ‡∏ó‡∏ô car ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ status ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô saleCar
    const carIds = items.map(item => parseInt(item.carId));
    console.log("üöó Looking for sale cars:", carIds);

    const cars = await prisma.saleCar.findMany({
      where: {
        id: { in: carIds },
        status: "Available" // ‚úÖ status ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô saleCar model
      },
      include: {
        car: {
          include: {
            brandCars: true,
            brandAndModels: true,
            typecar: true
          }
        }
      }
    });

    console.log("üîç Found available cars:", cars.length);

    if (cars.length !== carIds.length) {
      return res.status(400).json({
        success: false,
        message: "‡∫°‡∫µ‡∫•‡∫ª‡∫î‡∫ö‡∫≤‡∫á‡∫Ñ‡∫±‡∫ô‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫Ç‡∫≤‡∫ç‡ªÑ‡∫î‡ªâ‡∫´‡∫º‡∫∑‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫¢‡∫π‡ªà‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö"
      });
    }

    // ‡∫™‡ªâ‡∫≤‡∫á transaction ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Æ‡∫±‡∫ö‡∫õ‡∫∞‡∫Å‡∫±‡∫ô‡∫Ñ‡∫ß‡∫≤‡∫°‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á
    const result = await prisma.$transaction(async (prisma) => {
      // ‡∫™‡ªâ‡∫≤‡∫á Order
      const order = await prisma.order.create({
        data: {
          orderdById: userId,
          customerId: parseInt(customerId),
          totalAmount: parseFloat(totalAmount)
        }
      });

      console.log("üìã Order created:", order.id);

      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ saleCar ‡πÅ‡∏ó‡∏ô car
      const orderItems = [];
      for (const item of items) {
        const orderItem = await prisma.itemOnOrder.create({
          data: {
            orderId: order.id, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° orderId
            saleCarId: parseInt(item.carId), // ‚úÖ ‡πÉ‡∏ä‡πâ saleCarId ‡πÅ‡∏ó‡∏ô carId
            quantity: parseInt(item.quantity) || 1,
            price: parseFloat(item.price) || 0
          }
        });
        orderItems.push(orderItem);

        // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ saleCar ‡πÄ‡∏õ‡πá‡∏ô "Sold"
        await prisma.saleCar.update({
          where: { id: parseInt(item.carId) },
          data: { 
            status: "Sold",
            soldDate: new Date() // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢
          }
        });

        console.log(`‚úÖ Sale car ${item.carId} marked as sold`);
      }

      return { order, orderItems };
    });

    // ‡∏î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô Order ‡∫û‡ªâ‡∫≠‡∫°‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î
    const orderWithDetails = await prisma.order.findUnique({
      where: { id: result.order.id },
      include: {
        customer: {
          select: {
            id: true,
            fname: true,
            lname: true,
            number: true,
            email: true
          }
        },
        orderdBy: {
          select: {
            id: true,
            username: true,
            employee: {
              select: {
                firstName: true,
                lastName: true
              }
            }
          }
        },
        ItemOnOrder: {
          include: {
            saleCar: { // ‚úÖ ‡πÉ‡∏ä‡πâ saleCar ‡πÅ‡∏ó‡∏ô Car
              include: {
                car: {
                  include: {
                    brandCars: true,
                    typecar: true,
                    brandAndModels: true,
                    images: true
                  }
                },
                colorCar: true
              }
            }
          }
        }
      }
    });

    console.log("üéâ Order created successfully:", orderWithDetails.id);

    res.status(201).json({
      success: true,
      message: `‡∫™‡ªâ‡∫≤‡∫á‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß #${orderWithDetails.id}`,
      data: orderWithDetails
    });

  } catch (err) {
    console.error("‚ùå Error creating order:", err);
    
    // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö Prisma error
    if (err.code === 'P2002') {
      return res.status(400).json({
        success: false,
        message: "‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ä‡ªâ‡∫≥‡∫Å‡∫±‡∫ô‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö"
      });
    }

    res.status(500).json({
      success: false,
      message: "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡ªÄ‡∫ä‡∫µ‡ªÄ‡∫ß‡∫µ: " + err.message
    });
  }
};

// ‡∫î‡∫∂‡∫á‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î
exports.listOrders = async (req, res) => {
  try {
    const { page = 1, limit = 10, status, customerId, startDate, endDate } = req.query;
    
    // ‡∫™‡ªâ‡∫≤‡∫á filter conditions
    const where = {};
    
    if (customerId) {
      where.customerId = parseInt(customerId);
    }
    
    if (startDate && endDate) {
      where.createdAt = {
        gte: new Date(startDate),
        lte: new Date(endDate)
      };
    }

    // ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô orders
    const orders = await prisma.order.findMany({
      where,
      orderBy: { createdAt: "desc" },
      skip: (parseInt(page) - 1) * parseInt(limit),
      take: parseInt(limit),
      include: {
        customer: {
          select: {
            id: true,
            fname: true,
            lname: true,
            number: true,
            email: true
          }
        },
        orderdBy: {
          select: {
            id: true,
            username: true,
            employee: {
              select: {
                firstName: true,
                lastName: true
              }
            }
          }
        },
        ItemOnOrder: {
          include: {
            saleCar: { // ‚úÖ ‡πÉ‡∏ä‡πâ saleCar
              include: {
                car: {
                  include: {
                    brandCars: true,
                    typecar: true,
                    brandAndModels: true,
                    images: { take: 1 }
                  }
                },
                colorCar: true
              }
            }
          }
        }
      }
    });

    // ‡∫ô‡∫±‡∫ö‡∫à‡∫≥‡∫ô‡∫ß‡∫ô orders ‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î
    const totalOrders = await prisma.order.count({ where });
    const totalPages = Math.ceil(totalOrders / parseInt(limit));

    res.json({
      success: true,
      data: orders,
      pagination: {
        currentPage: parseInt(page),
        totalPages,
        totalOrders,
        limit: parseInt(limit)
      }
    });

  } catch (err) {
    console.error("Error listing orders:", err);
    res.status(500).json({
      success: false,
      message: "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡ªÄ‡∫ä‡∫µ‡ªÄ‡∫ß‡∫µ"
    });
  }
};

// ‡∫î‡∫∂‡∫á‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡ªÅ‡∫ï‡ªà‡∫•‡∫∞‡∫≠‡∫±‡∫ô
exports.getOrderById = async (req, res) => {
  try {
    const { id } = req.params;

    const order = await prisma.order.findUnique({
      where: { id: parseInt(id) },
      include: {
        customer: true,
        orderdBy: {
          select: {
            id: true,
            username: true,
            employee: {
              select: {
                firstName: true,
                lastName: true
              }
            }
          }
        },
        ItemOnOrder: {
          include: {
            saleCar: { // ‚úÖ ‡πÉ‡∏ä‡πâ saleCar
              include: {
                car: {
                  include: {
                    brandCars: true,
                    typecar: true,
                    brandAndModels: true,
                    images: true
                  }
                },
                colorCar: true
              }
            }
          }
        }
      }
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫ó‡∫µ‡ªà‡∫•‡∫∞‡∫ö‡∫∏"
      });
    }

    res.json({
      success: true,
      data: order
    });

  } catch (err) {
    console.error("Error getting order:", err);
    res.status(500).json({
      success: false,
      message: "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡ªÄ‡∫ä‡∫µ‡ªÄ‡∫ß‡∫µ"
    });
  }
};

// ‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫≠‡ªç‡ªÄ‡∫î‡∫µ (‡∫ñ‡ªâ‡∫≤‡∫à‡∫≥‡ªÄ‡∫õ‡∫±‡∫ô)
exports.updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const validStatuses = ["Pending", "Confirmed", "Delivered", "Cancelled"];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: "‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á"
      });
    }

    const order = await prisma.order.findUnique({
      where: { id: parseInt(id) }
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫ó‡∫µ‡ªà‡∫•‡∫∞‡∫ö‡∫∏"
      });
    }

    const updatedOrder = await prisma.order.update({
      where: { id: parseInt(id) },
      data: { 
        status: status,
        updatedAt: new Date()
      },
      include: {
        customer: true,
        orderdBy: {
          select: {
            id: true,
            username: true
          }
        },
        ItemOnOrder: {
          include: {
            saleCar: { // ‚úÖ ‡πÉ‡∏ä‡πâ saleCar
              include: {
                car: {
                  include: {
                    brandCars: true,
                    typecar: true
                  }
                }
              }
            }
          }
        }
      }
    });

    res.json({
      success: true,
      message: "‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß",
      data: updatedOrder
    });

  } catch (err) {
    console.error("Error updating order status:", err);
    res.status(500).json({
      success: false,
      message: "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡ªÄ‡∫ä‡∫µ‡ªÄ‡∫ß‡∫µ"
    });
  }
};

// ‡∫™‡∫∞‡∫ñ‡∫¥‡∫ï‡∫¥‡∫Å‡∫≤‡∫ô‡∫Ç‡∫≤‡∫ç
exports.getSalesStatistics = async (req, res) => {
  try {
    const { startDate, endDate, period = 'month' } = req.query;
    
    let dateFilter = {};
    if (startDate && endDate) {
      dateFilter = {
        createdAt: {
          gte: new Date(startDate),
          lte: new Date(endDate)
        }
      };
    } else {
      // Default ‡ªÉ‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫ô‡∫µ‡ªâ
      const startOfMonth = new Date();
      startOfMonth.setDate(1);
      startOfMonth.setHours(0, 0, 0, 0);
      
      const endOfMonth = new Date();
      endOfMonth.setMonth(endOfMonth.getMonth() + 1);
      endOfMonth.setDate(0);
      endOfMonth.setHours(23, 59, 59, 999);
      
      dateFilter = {
        createdAt: {
          gte: startOfMonth,
          lte: endOfMonth
        }
      };
    }

    // ‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î
    const totalOrders = await prisma.order.count({
      where: dateFilter
    });

    // ‡∫ç‡∫≠‡∫î‡∫Ç‡∫≤‡∫ç‡∫•‡∫ß‡∫°
    const salesSum = await prisma.order.aggregate({
      where: dateFilter,
      _sum: {
        totalAmount: true
      }
    });

    // ‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫Ç‡∫≤‡∫ç
    const soldCars = await prisma.itemOnOrder.count({
      where: {
        createdAt: dateFilter.createdAt
      }
    });

    // ‚úÖ ‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫Ç‡∫≤‡∫ç‡∫î‡∫µ‡∫ó‡∫µ‡ªà‡∫™‡∫∏‡∫î - ‡πÉ‡∏ä‡πâ saleCarId ‡πÅ‡∏ó‡∏ô carId
    const topSellingCars = await prisma.itemOnOrder.groupBy({
      by: ['saleCarId'],
      where: {
        createdAt: dateFilter.createdAt
      },
      _count: {
        saleCarId: true
      },
      orderBy: {
        _count: {
          saleCarId: 'desc'
        }
      },
      take: 5
    });

    // ‡∏î·∏å‡∏∂‡∏á‡∏•‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏µ‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
    const topCarsDetails = await Promise.all(
      topSellingCars.map(async (item) => {
        const saleCar = await prisma.saleCar.findUnique({
          where: { id: item.saleCarId },
          include: {
            car: {
              include: {
                brandCars: true,
                typecar: true,
                images: { take: 1 }
              }
            },
            colorCar: true
          }
        });
        return {
          saleCar,
          soldCount: item._count.saleCarId
        };
      })
    );

    res.json({
      success: true,
      data: {
        totalOrders,
        totalSales: salesSum._sum.totalAmount || 0,
        soldCars,
        topSellingCars: topCarsDetails,
        period: {
          startDate: dateFilter.createdAt?.gte,
          endDate: dateFilter.createdAt?.lte
        }
      }
    });

  } catch (err) {
    console.error("Error getting sales statistics:", err);
    res.status(500).json({
      success: false,
      message: "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡ªÄ‡∫ä‡∫µ‡ªÄ‡∫ß‡∫µ"
    });
  }
};

// ‡∫•‡∫ª‡∫ö‡∫≠‡ªç‡ªÄ‡∫î‡∫µ (‡∫™‡∫≥‡∫•‡∫±‡∫ö admin ‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô)
exports.deleteOrder = async (req, res) => {
  try {
    const { id } = req.params;

    const order = await prisma.order.findUnique({
      where: { id: parseInt(id) },
      include: {
        ItemOnOrder: {
          include: {
            saleCar: true // ‚úÖ ‡πÉ‡∏ä‡πâ saleCar
          }
        }
      }
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫ó‡∫µ‡ªà‡∫•‡∫∞‡∫ö‡∫∏"
      });
    }

    // ‡ªÉ‡∫ä‡ªâ transaction ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫∑‡∫ô‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫•‡∫ª‡∫î‡ªÅ‡∫•‡∫∞‡∫•‡∫ª‡∫ö‡∫≠‡ªç‡ªÄ‡∫î‡∫µ
    await prisma.$transaction(async (prisma) => {
      // ‚úÖ ‡∫Ñ‡∫∑‡∫ô‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞ saleCar ‡πÄ‡∫õ‡∫±‡∫ô Available
      for (const item of order.ItemOnOrder) {
        await prisma.saleCar.update({
          where: { id: item.saleCarId }, // ‚úÖ ‡πÉ‡∏ä‡πâ saleCarId
          data: { 
            status: "Available",
            soldDate: null // ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢
          }
        });
      }

      // ‡∫•‡∫ª‡∫ö ItemOnOrder
      await prisma.itemOnOrder.deleteMany({
        where: { orderId: parseInt(id) }
      });

      // ‡∫•‡∫ª‡∏ö Order
      await prisma.order.delete({
        where: { id: parseInt(id) }
      });
    });

    res.json({
      success: true,
      message: "‡∫•‡∫ª‡∫ö‡∫≠‡ªç‡ªÄ‡∫î‡∫µ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß"
    });

  } catch (err) {
    console.error("Error deleting order:", err);
    res.status(500).json({
      success: false,
      message: "‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö‡∫≠‡ªç‡ªÄ‡∫î‡∫µ"
    });
  }
};